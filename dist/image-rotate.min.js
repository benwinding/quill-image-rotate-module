!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var n=e();for(var o in n)("object"==typeof exports?exports:t)[o]=n[o]}}(window,(function(){return function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/dist/",n(n.s=100)}([function(t,e){t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},function(t,e,n){var o=n(19),r="object"==typeof self&&self&&self.Object===Object&&self,i=o||r||Function("return this")();t.exports=i},function(t,e){t.exports=function(t){return null!=t&&"object"==typeof t}},function(t,e,n){var o=n(18),r=n(40),i=n(41),c=o?o.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":c&&c in Object(t)?r(t):i(t)}},function(t,e,n){var o=n(49),r=n(50),i=n(51),c=n(52),u=n(53);function a(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var o=t[e];this.set(o[0],o[1])}}a.prototype.clear=o,a.prototype.delete=r,a.prototype.get=i,a.prototype.has=c,a.prototype.set=u,t.exports=a},function(t,e,n){var o=n(6);t.exports=function(t,e){for(var n=t.length;n--;)if(o(t[n][0],e))return n;return-1}},function(t,e){t.exports=function(t,e){return t===e||t!=t&&e!=e}},function(t,e,n){var o=n(9)(Object,"create");t.exports=o},function(t,e,n){var o=n(68);t.exports=function(t,e){var n=t.__data__;return o(e)?n["string"==typeof e?"string":"hash"]:n.map}},function(t,e,n){var o=n(38),r=n(45);t.exports=function(t,e){var n=r(t,e);return o(n)?n:void 0}},function(t,e,n){var o=n(3),r=n(0);t.exports=function(t){if(!r(t))return!1;var e=o(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(t,e,n){var o=n(17);t.exports=function(t,e,n){"__proto__"==e&&o?o(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){var o=n(10),r=n(27);t.exports=function(t){return null!=t&&r(t.length)&&!o(t)}},function(t,e){t.exports=function(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}},function(t,e,n){var o=n(16),r=n(34),i=n(35);t.exports=function(t,e){return i(r(t,e,o),t+"")}},function(t,e){t.exports=function(t){return t}},function(t,e,n){var o=n(9),r=function(){try{var t=o(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();t.exports=r},function(t,e,n){var o=n(1).Symbol;t.exports=o},function(t,e,n){(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.exports=n}).call(this,n(39))},function(t,e,n){var o=n(48),r=n(22),i=n(72),c=n(74),u=n(0),a=n(31),s=n(30);t.exports=function t(e,n,l,f,p){e!==n&&i(n,(function(i,a){if(p||(p=new o),u(i))c(e,n,a,l,t,f,p);else{var v=f?f(s(e,a),i,a+"",e,n,p):void 0;void 0===v&&(v=i),r(e,a,v)}}),a)}},function(t,e,n){var o=n(9)(n(1),"Map");t.exports=o},function(t,e,n){var o=n(11),r=n(6);t.exports=function(t,e,n){(void 0===n||r(t[e],n))&&(void 0!==n||e in t)||o(t,e,n)}},function(t,e,n){var o=n(82)(Object.getPrototypeOf,Object);t.exports=o},function(t,e){var n=Object.prototype;t.exports=function(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||n)}},function(t,e,n){var o=n(83),r=n(2),i=Object.prototype,c=i.hasOwnProperty,u=i.propertyIsEnumerable,a=o(function(){return arguments}())?o:function(t){return r(t)&&c.call(t,"callee")&&!u.call(t,"callee")};t.exports=a},function(t,e){var n=Array.isArray;t.exports=n},function(t,e){t.exports=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}},function(t,e,n){(function(t){var o=n(1),r=n(85),i=e&&!e.nodeType&&e,c=i&&"object"==typeof t&&t&&!t.nodeType&&t,u=c&&c.exports===i?o.Buffer:void 0,a=(u?u.isBuffer:void 0)||r;t.exports=a}).call(this,n(12)(t))},function(t,e,n){var o=n(87),r=n(88),i=n(89),c=i&&i.isTypedArray,u=c?r(c):o;t.exports=u},function(t,e){t.exports=function(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}},function(t,e,n){var o=n(93),r=n(95),i=n(13);t.exports=function(t){return i(t)?o(t,!0):r(t)}},function(t,e){var n=/^(?:0|[1-9]\d*)$/;t.exports=function(t,e){var o=typeof t;return!!(e=null==e?9007199254740991:e)&&("number"==o||"symbol"!=o&&n.test(t))&&t>-1&&t%1==0&&t<e}},function(t,e,n){var o=n(14),r=n(15),i=n(47),c=n(97),u=r((function(t){return t.push(void 0,i),o(c,void 0,t)}));t.exports=u},function(t,e,n){var o=n(14),r=Math.max;t.exports=function(t,e,n){return e=r(void 0===e?t.length-1:e,0),function(){for(var i=arguments,c=-1,u=r(i.length-e,0),a=Array(u);++c<u;)a[c]=i[e+c];c=-1;for(var s=Array(e+1);++c<e;)s[c]=i[c];return s[e]=n(a),o(t,this,s)}}},function(t,e,n){var o=n(36),r=n(46)(o);t.exports=r},function(t,e,n){var o=n(37),r=n(17),i=n(16),c=r?function(t,e){return r(t,"toString",{configurable:!0,enumerable:!1,value:o(e),writable:!0})}:i;t.exports=c},function(t,e){t.exports=function(t){return function(){return t}}},function(t,e,n){var o=n(10),r=n(42),i=n(0),c=n(44),u=/^\[object .+?Constructor\]$/,a=Function.prototype,s=Object.prototype,l=a.toString,f=s.hasOwnProperty,p=RegExp("^"+l.call(f).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!i(t)||r(t))&&(o(t)?p:u).test(c(t))}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var o=n(18),r=Object.prototype,i=r.hasOwnProperty,c=r.toString,u=o?o.toStringTag:void 0;t.exports=function(t){var e=i.call(t,u),n=t[u];try{t[u]=void 0;var o=!0}catch(t){}var r=c.call(t);return o&&(e?t[u]=n:delete t[u]),r}},function(t,e){var n=Object.prototype.toString;t.exports=function(t){return n.call(t)}},function(t,e,n){var o,r=n(43),i=(o=/[^.]+$/.exec(r&&r.keys&&r.keys.IE_PROTO||""))?"Symbol(src)_1."+o:"";t.exports=function(t){return!!i&&i in t}},function(t,e,n){var o=n(1)["__core-js_shared__"];t.exports=o},function(t,e){var n=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return n.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},function(t,e){t.exports=function(t,e){return null==t?void 0:t[e]}},function(t,e){var n=Date.now;t.exports=function(t){var e=0,o=0;return function(){var r=n(),i=16-(r-o);if(o=r,i>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}},function(t,e,n){var o=n(20),r=n(0);t.exports=function t(e,n,i,c,u,a){return r(e)&&r(n)&&(a.set(n,e),o(e,n,void 0,t,a),a.delete(n)),e}},function(t,e,n){var o=n(4),r=n(54),i=n(55),c=n(56),u=n(57),a=n(58);function s(t){var e=this.__data__=new o(t);this.size=e.size}s.prototype.clear=r,s.prototype.delete=i,s.prototype.get=c,s.prototype.has=u,s.prototype.set=a,t.exports=s},function(t,e){t.exports=function(){this.__data__=[],this.size=0}},function(t,e,n){var o=n(5),r=Array.prototype.splice;t.exports=function(t){var e=this.__data__,n=o(e,t);return!(n<0)&&(n==e.length-1?e.pop():r.call(e,n,1),--this.size,!0)}},function(t,e,n){var o=n(5);t.exports=function(t){var e=this.__data__,n=o(e,t);return n<0?void 0:e[n][1]}},function(t,e,n){var o=n(5);t.exports=function(t){return o(this.__data__,t)>-1}},function(t,e,n){var o=n(5);t.exports=function(t,e){var n=this.__data__,r=o(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this}},function(t,e,n){var o=n(4);t.exports=function(){this.__data__=new o,this.size=0}},function(t,e){t.exports=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n}},function(t,e){t.exports=function(t){return this.__data__.get(t)}},function(t,e){t.exports=function(t){return this.__data__.has(t)}},function(t,e,n){var o=n(4),r=n(21),i=n(59);t.exports=function(t,e){var n=this.__data__;if(n instanceof o){var c=n.__data__;if(!r||c.length<199)return c.push([t,e]),this.size=++n.size,this;n=this.__data__=new i(c)}return n.set(t,e),this.size=n.size,this}},function(t,e,n){var o=n(60),r=n(67),i=n(69),c=n(70),u=n(71);function a(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var o=t[e];this.set(o[0],o[1])}}a.prototype.clear=o,a.prototype.delete=r,a.prototype.get=i,a.prototype.has=c,a.prototype.set=u,t.exports=a},function(t,e,n){var o=n(61),r=n(4),i=n(21);t.exports=function(){this.size=0,this.__data__={hash:new o,map:new(i||r),string:new o}}},function(t,e,n){var o=n(62),r=n(63),i=n(64),c=n(65),u=n(66);function a(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var o=t[e];this.set(o[0],o[1])}}a.prototype.clear=o,a.prototype.delete=r,a.prototype.get=i,a.prototype.has=c,a.prototype.set=u,t.exports=a},function(t,e,n){var o=n(7);t.exports=function(){this.__data__=o?o(null):{},this.size=0}},function(t,e){t.exports=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}},function(t,e,n){var o=n(7),r=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;if(o){var n=e[t];return"__lodash_hash_undefined__"===n?void 0:n}return r.call(e,t)?e[t]:void 0}},function(t,e,n){var o=n(7),r=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;return o?void 0!==e[t]:r.call(e,t)}},function(t,e,n){var o=n(7);t.exports=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=o&&void 0===e?"__lodash_hash_undefined__":e,this}},function(t,e,n){var o=n(8);t.exports=function(t){var e=o(this,t).delete(t);return this.size-=e?1:0,e}},function(t,e){t.exports=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}},function(t,e,n){var o=n(8);t.exports=function(t){return o(this,t).get(t)}},function(t,e,n){var o=n(8);t.exports=function(t){return o(this,t).has(t)}},function(t,e,n){var o=n(8);t.exports=function(t,e){var n=o(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this}},function(t,e,n){var o=n(73)();t.exports=o},function(t,e){t.exports=function(t){return function(e,n,o){for(var r=-1,i=Object(e),c=o(e),u=c.length;u--;){var a=c[t?u:++r];if(!1===n(i[a],a,i))break}return e}}},function(t,e,n){var o=n(22),r=n(75),i=n(76),c=n(79),u=n(80),a=n(25),s=n(26),l=n(84),f=n(28),p=n(10),v=n(0),d=n(86),y=n(29),h=n(30),b=n(90);t.exports=function(t,e,n,g,x,_,m){var j=h(t,n),w=h(e,n),O=m.get(w);if(O)o(t,n,O);else{var S=_?_(j,w,n+"",t,e,m):void 0,A=void 0===S;if(A){var k=s(w),P=!k&&f(w),E=!k&&!P&&y(w);S=w,k||P||E?s(j)?S=j:l(j)?S=c(j):P?(A=!1,S=r(w,!0)):E?(A=!1,S=i(w,!0)):S=[]:d(w)||a(w)?(S=j,a(j)?S=b(j):v(j)&&!p(j)||(S=u(w))):A=!1}A&&(m.set(w,S),x(S,w,g,_,m),m.delete(w)),o(t,n,S)}}},function(t,e,n){(function(t){var o=n(1),r=e&&!e.nodeType&&e,i=r&&"object"==typeof t&&t&&!t.nodeType&&t,c=i&&i.exports===r?o.Buffer:void 0,u=c?c.allocUnsafe:void 0;t.exports=function(t,e){if(e)return t.slice();var n=t.length,o=u?u(n):new t.constructor(n);return t.copy(o),o}}).call(this,n(12)(t))},function(t,e,n){var o=n(77);t.exports=function(t,e){var n=e?o(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}},function(t,e,n){var o=n(78);t.exports=function(t){var e=new t.constructor(t.byteLength);return new o(e).set(new o(t)),e}},function(t,e,n){var o=n(1).Uint8Array;t.exports=o},function(t,e){t.exports=function(t,e){var n=-1,o=t.length;for(e||(e=Array(o));++n<o;)e[n]=t[n];return e}},function(t,e,n){var o=n(81),r=n(23),i=n(24);t.exports=function(t){return"function"!=typeof t.constructor||i(t)?{}:o(r(t))}},function(t,e,n){var o=n(0),r=Object.create,i=function(){function t(){}return function(e){if(!o(e))return{};if(r)return r(e);t.prototype=e;var n=new t;return t.prototype=void 0,n}}();t.exports=i},function(t,e){t.exports=function(t,e){return function(n){return t(e(n))}}},function(t,e,n){var o=n(3),r=n(2);t.exports=function(t){return r(t)&&"[object Arguments]"==o(t)}},function(t,e,n){var o=n(13),r=n(2);t.exports=function(t){return r(t)&&o(t)}},function(t,e){t.exports=function(){return!1}},function(t,e,n){var o=n(3),r=n(23),i=n(2),c=Function.prototype,u=Object.prototype,a=c.toString,s=u.hasOwnProperty,l=a.call(Object);t.exports=function(t){if(!i(t)||"[object Object]"!=o(t))return!1;var e=r(t);if(null===e)return!0;var n=s.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&a.call(n)==l}},function(t,e,n){var o=n(3),r=n(27),i=n(2),c={};c["[object Float32Array]"]=c["[object Float64Array]"]=c["[object Int8Array]"]=c["[object Int16Array]"]=c["[object Int32Array]"]=c["[object Uint8Array]"]=c["[object Uint8ClampedArray]"]=c["[object Uint16Array]"]=c["[object Uint32Array]"]=!0,c["[object Arguments]"]=c["[object Array]"]=c["[object ArrayBuffer]"]=c["[object Boolean]"]=c["[object DataView]"]=c["[object Date]"]=c["[object Error]"]=c["[object Function]"]=c["[object Map]"]=c["[object Number]"]=c["[object Object]"]=c["[object RegExp]"]=c["[object Set]"]=c["[object String]"]=c["[object WeakMap]"]=!1,t.exports=function(t){return i(t)&&r(t.length)&&!!c[o(t)]}},function(t,e){t.exports=function(t){return function(e){return t(e)}}},function(t,e,n){(function(t){var o=n(19),r=e&&!e.nodeType&&e,i=r&&"object"==typeof t&&t&&!t.nodeType&&t,c=i&&i.exports===r&&o.process,u=function(){try{var t=i&&i.require&&i.require("util").types;return t||c&&c.binding&&c.binding("util")}catch(t){}}();t.exports=u}).call(this,n(12)(t))},function(t,e,n){var o=n(91),r=n(31);t.exports=function(t){return o(t,r(t))}},function(t,e,n){var o=n(92),r=n(11);t.exports=function(t,e,n,i){var c=!n;n||(n={});for(var u=-1,a=e.length;++u<a;){var s=e[u],l=i?i(n[s],t[s],s,n,t):void 0;void 0===l&&(l=t[s]),c?r(n,s,l):o(n,s,l)}return n}},function(t,e,n){var o=n(11),r=n(6),i=Object.prototype.hasOwnProperty;t.exports=function(t,e,n){var c=t[e];i.call(t,e)&&r(c,n)&&(void 0!==n||e in t)||o(t,e,n)}},function(t,e,n){var o=n(94),r=n(25),i=n(26),c=n(28),u=n(32),a=n(29),s=Object.prototype.hasOwnProperty;t.exports=function(t,e){var n=i(t),l=!n&&r(t),f=!n&&!l&&c(t),p=!n&&!l&&!f&&a(t),v=n||l||f||p,d=v?o(t.length,String):[],y=d.length;for(var h in t)!e&&!s.call(t,h)||v&&("length"==h||f&&("offset"==h||"parent"==h)||p&&("buffer"==h||"byteLength"==h||"byteOffset"==h)||u(h,y))||d.push(h);return d}},function(t,e){t.exports=function(t,e){for(var n=-1,o=Array(t);++n<t;)o[n]=e(n);return o}},function(t,e,n){var o=n(0),r=n(24),i=n(96),c=Object.prototype.hasOwnProperty;t.exports=function(t){if(!o(t))return i(t);var e=r(t),n=[];for(var u in t)("constructor"!=u||!e&&c.call(t,u))&&n.push(u);return n}},function(t,e){t.exports=function(t){var e=[];if(null!=t)for(var n in Object(t))e.push(n);return e}},function(t,e,n){var o=n(20),r=n(98)((function(t,e,n,r){o(t,e,n,r)}));t.exports=r},function(t,e,n){var o=n(15),r=n(99);t.exports=function(t){return o((function(e,n){var o=-1,i=n.length,c=i>1?n[i-1]:void 0,u=i>2?n[2]:void 0;for(c=t.length>3&&"function"==typeof c?(i--,c):void 0,u&&r(n[0],n[1],u)&&(c=i<3?void 0:c,i=1),e=Object(e);++o<i;){var a=n[o];a&&t(e,a,o,c)}return e}))}},function(t,e,n){var o=n(6),r=n(13),i=n(32),c=n(0);t.exports=function(t,e,n){if(!c(n))return!1;var u=typeof e;return!!("number"==u?r(n)&&i(e,n.length):"string"==u&&e in n)&&o(n[e],t)}},function(t,e,n){"use strict";n.r(e),n.d(e,"default",(function(){return A}));var o=n(33),r=n.n(o),i={modules:["Toolbar"],overlayStyles:{position:"absolute",boxSizing:"border-box"},toolbarStyles:{position:"absolute",bottom:"10px",right:"0",left:"0",height:"0",minWidth:"100px",font:"12px/1.0 Arial, Helvetica, sans-serif",textAlign:"center",color:"#333",boxSizing:"border-box",cursor:"default"},toolbarButtonStyles:{display:"inline-block",width:"24px",height:"24px",background:"white",border:"1px solid #999",verticalAlign:"middle"},toolbarButtonSvgStyles:{fill:"#444",stroke:"#444",strokeWidth:"2"}},c='<svg viewbox="0 0 18 18">\n  <polygon class="ql-fill ql-stroke" points="6 10 4 12 2 10 6 10"></polygon>\n  <path class="ql-stroke" d="M8.09,13.91A4.6,4.6,0,0,0,9,14,5,5,0,1,0,4,9"></path>\n</svg>',u='<svg viewbox="0 0 18 18">\n  <polygon class="ql-fill ql-stroke" points="12 10 14 12 16 10 12 10"></polygon>\n  <path class="ql-stroke" d="M9.91,13.91A4.6,4.6,0,0,1,9,14a5,5,0,1,1,5-5"></path>\n</svg>';function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var s=function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),a(this,"onCreate",(function(){})),a(this,"onDestroy",(function(){})),a(this,"onUpdate",(function(){})),this.overlay=e.overlay,this.img=e.img,this.options=e.options,this.requestUpdate=e.onUpdate};function l(t){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function f(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function p(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function v(t,e){return!e||"object"!==l(e)&&"function"!=typeof e?y(t):e}function d(t){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function y(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function h(t,e){return(h=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function b(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var g=window.Quill.imports.parchment,x=new g.Attributor.Style("float","float"),_=new g.Attributor.Style("margin","margin"),m=new g.Attributor.Style("display","display"),j=new g.Attributor.Style("transform","transform");function w(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function O(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var S={Toolbar:function(t){function e(){var t,n;f(this,e);for(var o=arguments.length,r=new Array(o),i=0;i<o;i++)r[i]=arguments[i];return b(y(n=v(this,(t=d(e)).call.apply(t,[this].concat(r)))),"rotation",0),b(y(n),"onCreate",(function(){n.toolbar=document.createElement("div"),Object.assign(n.toolbar.style,n.options.toolbarStyles),n.overlay&&(n.overlay.appendChild(n.toolbar),n._defineAlignments(),n._addToolbarButtons(),n.rotation=+n.img.getAttribute("_rotation")||0,console.log("onCreate",{rotation:n.rotation}))})),b(y(n),"onDestroy",(function(){})),b(y(n),"onUpdate",(function(){})),b(y(n),"_defineAlignments",(function(){n.rotationvalue="",n.alignments=[{name:"rotate-left",icon:c,apply:function(){var t=n._setRotation("left");console.log("Rotate left!",{rotationvalue:t}),n.img.setAttribute("_rotation",n.rotation),j.add(n.img,t)},isApplied:function(){}},{name:"rotate-right",icon:u,apply:function(){var t=n._setRotation("right");console.log("Rotate right!",{rotationvalue:t}),n.img.setAttribute("_rotation",n.rotation),j.add(n.img,t)},isApplied:function(){}}]})),b(y(n),"_addToolbarButtons",(function(){var t=[];n.alignments.forEach((function(e,o){var r=document.createElement("span");t.push(r),r.innerHTML=e.icon,r.addEventListener("click",(function(){t.forEach((function(t){return t.style.filter=""})),e.isApplied()?(x.remove(n.img),_.remove(n.img),m.remove(n.img)):(n._selectButton(r),e.apply()),n.requestUpdate()})),Object.assign(r.style,n.options.toolbarButtonStyles),o>0&&(r.style.borderLeftWidth="0"),Object.assign(r.children[0].style,n.options.toolbarButtonSvgStyles),e.isApplied()&&n._selectButton(r),n.toolbar.appendChild(r)}))})),b(y(n),"_selectButton",(function(t){t.style.filter="invert(20%)"})),n}var n,o,r;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&h(t,e)}(e,t),n=e,(o=[{key:"_setRotation",value:function(t){var e=this.rotation,n="left"==t?-90:90;return this.rotation=(e+360+n)%360,"rotate("+this.rotation+"deg)"}}])&&p(n.prototype,o),r&&p(n,r),e}(s)},A=function t(e){var n=this,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};w(this,t),O(this,"initializeModules",(function(){n.removeModules(),n.modules=n.moduleClasses.map((function(t){return new(S[t]||t)(n)})),n.modules.forEach((function(t){t.onCreate()})),n.onUpdate()})),O(this,"onUpdate",(function(){n.repositionElements(),n.modules.forEach((function(t){t.onUpdate()}))})),O(this,"removeModules",(function(){n.modules.forEach((function(t){t.onDestroy()})),n.modules=[]})),O(this,"handleClick",(function(t){if(t.target&&t.target.tagName&&"IMG"===t.target.tagName.toUpperCase()){if(n.img===t.target)return;n.img&&n.hide(),n.show(t.target)}else n.img&&n.hide()})),O(this,"show",(function(t){n.img=t,n.showOverlay(),n.initializeModules()})),O(this,"showOverlay",(function(){n.overlay&&n.hideOverlay(),n.quill.setSelection(null),n.setUserSelect("none"),document.addEventListener("keyup",n.checkImage,!0),n.quill.root.addEventListener("input",n.checkImage,!0),n.overlay=document.createElement("div"),Object.assign(n.overlay.style,n.options.overlayStyles),n.quill.root.parentNode.appendChild(n.overlay),n.repositionElements();var t=n.img;n.overlay&&t&&(t.getAttribute("clickCount")<1&&(t.setAttribute("clickCount",1),n.quill.root.click(),setTimeout((function(){t.click()}),1e3)),t.setAttribute("clickCount",0))})),O(this,"hideOverlay",(function(){n.overlay&&(n.quill.root.parentNode.removeChild(n.overlay),n.overlay=void 0,document.removeEventListener("keyup",n.checkImage),n.quill.root.removeEventListener("input",n.checkImage),n.setUserSelect(""))})),O(this,"repositionElements",(function(){if(n.overlay&&n.img){var t=n.quill.root.parentNode,e=n.img,o=e.getBoundingClientRect(),r=t.getBoundingClientRect(),i=n.getImageStyle(e.height,e.width,o.height,o.width);Object.assign(n.img.style,i);var c=+e.getAttribute("_rotation")||0,u=e.getBoundingClientRect(),a=n.getOverlayStyle(c,e.width,e.height,u.left,u.top,r.left,r.top,t.scrollLeft,t.scrollTop);Object.assign(n.overlay.style,a)}})),O(this,"getImageStyle",(function(t,e,n,o){var r=(o-e)/2;return{margin:"".concat((n-t)/2,"px ").concat(r,"px")}})),O(this,"getOverlayStyle",(function(t,e,n,o,r,i,c,u,a){var s={};switch(t){case 90:case 270:s.width="".concat(n,"px"),s.height="".concat(e,"px"),s.left="".concat(o-i-1+u,"px"),s.top="".concat(r-c+a,"px");break;case 180:case 0:default:s.width="".concat(e,"px"),s.height="".concat(n,"px"),s.left="".concat(o-i-1+u,"px"),s.top="".concat(r-c+a,"px")}return console.log("getOverlayStyle",{rotation:t,imgW:e,imgH:n,imgRectL:o,imgRectT:r,cRectL:i,cRectT:c,pScrollL:u,pScrollT:a,styles:s}),s})),O(this,"hide",(function(){n.hideOverlay(),n.removeModules(),n.img=void 0})),O(this,"setUserSelect",(function(t){["userSelect","mozUserSelect","webkitUserSelect","msUserSelect"].forEach((function(e){n.quill.root.style[e]=t,document.documentElement.style[e]=t}))})),O(this,"checkImage",(function(t){n.img&&(46!=t.keyCode&&8!=t.keyCode||window.Quill.find(n.img).deleteAt(0),n.hide())})),this.quill=e;var c=!1;o.modules&&(c=o.modules.slice()),this.options=r()({},o,i),!1!==c&&(this.options.modules=c),this.quill.root.addEventListener("click",this.handleClick,!1),this.quill.root.parentNode.style.position=this.quill.root.parentNode.style.position||"relative",this.moduleClasses=this.options.modules,this.modules=[]};window.Quill&&window.Quill.register("modules/imageRotate",A)}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,